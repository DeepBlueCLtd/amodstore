# https://docs.pygeoapi.io/en/stable/configuration.html
# Demo pygeoapi configuration YAML with a single dataset defined.
# Dataset refers to an image collection of 1x1 degree square patches (EPSG:4326).
# Initial section defines the server configuration (ports) and user info.
#
# Server-wide settings
server:
    bind:
        host: 0.0.0.0
        port: 5000
    url: http://localhost:5000
    mimetype: application/json; charset=UTF-8
    encoding: utf-8
    gzip: false # compress responses to requests?
    languages:
        - en-US
    # cors: true # (support CORS?)
    pretty_print: true
    limit: 10 # Max items to return
    # admin: false # enable Admin API?
    # templates:
      # path: /path/to/Jinja2/templates
      # static: /path/to/static/folder # css/js/img
    map: # leaflet map setup for the html pages
        url: https://tile.openstreetmap.org/{z}/{x}/{y}.png
        attribution: '&copy; <a href="https://openstreetmap.org/copyright">OpenStreetMap contributors</a>'
#    manager: # optional OGC API - Processes asynchronous job management
#        name: TinyDB
#        connection: /tmp/pygeoapi-process-manager.db
#        output_dir: /tmp/ # temporary file area for storing job results (files)
    # ogc_schemas_location: /opt/schemas.opengis.net
#api_rules:  # optional API design rules to which pygeoapi should adhere
#      api_version: 1.2.3  # omit to use pygeoapi's software version
#      strict_slashes: true  # trailing slashes will not be allowed and result in a 404
#      url_prefix: 'v{api_major}'  # adds a /v1 prefix to all URL paths
#      version_header: X-API-Version  # add a response header of this name with the API version

logging:
    level: ERROR
    #logfile: /tmp/pygeoapi.log
    #logformat: # example for milliseconds:'[%(asctime)s.%(msecs)03d] {%(pathname)s:%(lineno)d} %(levelname)s - %(message)s'
    #dateformat: # example for milliseconds:'%Y-%m-%dT%H:%M:%S'

metadata:
    identification:
        title: pygeoapi default instance  # the title of the service
        description: pygeoapi provides an API to geospatial data  # some descriptive text about the service
        keywords:  # list of keywords about the service
            - geospatial
            - data
            - api
        keywords_type: theme  # keyword type as per the ISO 19115 MD_KeywordTypeCode codelist. Accepted values are discipline, temporal, place, theme, stratum
        terms_of_service: https://creativecommons.org/licenses/by/4.0/  # terms of service
        url: http://example.org  # informative URL about the service
    license:  # licensing details
        name: CC-BY 4.0 license
        url: https://creativecommons.org/licenses/by/4.0/
    provider:  # service provider details
        name: Organization Name
        url: https://pygeoapi.io
    contact:  # service contact details
        name: Lastname, Firstname
        position: Position Title
        address: Mailing Address
        city: City
        stateorprovince: Administrative Area
        postalcode: Zip or Postal Code
        country: Country
        phone: +xx-xxx-xxx-xxxx
        fax: +xx-xxx-xxx-xxxx
        email: you@example.org
        url: Contact URL
        hours: Mo-Fr 08:00-17:00
        instructions: During hours of service. Off on weekends.
        role: pointOfContact

# Resource types: collection, process, stac-collection
# Multiple providers are possible, types: feature, coverage, tile
# Collection can have a default provider, if not indicated it's the first

resources:
    stac: # <- this is a variable name, can be anything
        type: stac-collection  # REQUIRED (collection, process, or stac-collection)
        visibility: default  # OPTIONAL
        title: 1 degree tiles  # title of dataset
        description: Some tiles at 1 degree # abstract of dataset
        keywords:  # list of related keywords
            - tiles
            - some
            - one
            - degree
        links:  # list of 1..n related links
            - type: text/html  # MIME type
              rel: about  # link relations per https://www.iana.org/assignments/link-relations/link-relations.xhtml
              title: tiles  # title
              href: https://www.google.com/maps # URL, either pointing to the data or descriptive
              hreflang: en  # language
        extents:  # spatial and temporal extents
            spatial:  # required
                bbox: [-2,-2,2,2]  # list of minx, miny, maxx, maxy
                crs: http://www.opengis.net/def/crs/OGC/1.3/CRS84  # CRS
            temporal:  # optional
                begin: 2000-01-01T00:00:01Z  # start datetime in RFC3339
                end: 2000-12-31T23:59:59Z  # end datetime in RFC3339
                trs: http://www.opengis.net/def/uom/ISO-8601/0/Gregorian  # TRS
        providers:  # list of 1..n required connections information
            # provider name
            # see pygeoapi.plugin for supported providers
            # for custom built plugins, use the import path (e.g. mypackage.provider.MyProvider)
            # see Plugins section for more information
            - type: stac # underlying data geospatial type: (allowed values are: feature, coverage, record, tile, edr)
              name: FileSystem
              data: /data  # required: the data filesystem path or URL, depending on plugin setup
              file_types:
                  - .tif
              # editable transactions: DO NOT ACTIVATE unless you have setup access control beyond pygeoapi
              editable: true  # optional: if backend is writable, default is false
              # coordinate reference systems (CRS) section is optional
              # default CRSs are http://www.opengis.net/def/crs/OGC/1.3/CRS84 (coordinates without height)
              # and http://www.opengis.net/def/crs/OGC/1.3/CRS84h (coordinates with ellipsoidal height)
              crs: # supported coordinate reference systems (CRS) for 'crs' and 'bbox-crs' query parameters
                  - http://www.opengis.net/def/crs/OGC/1.3/CRS84
              storage_crs: http://www.opengis.net/def/crs/OGC/1.3/CRS84 # optional CRS in which data is stored, default: as 'crs' field